{"ast":null,"code":"var _jsxFileName = \"/home/anthony/course_work/deckbuilder/src/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport './index.css';\nimport { DeckList, SearchBar, SearchResults } from './components';\nimport { fetchCards } from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // fetchCards().then(console.log);\n  const [results, setResults] = useState([]);\n  const [deck, setDeck] = useState([]);\n  console.log(\"new results\", results);\n\n  const addCardToDeck = ({\n    id,\n    name\n  }) => {\n    const nextDeck = [...deck]; // make a duplicate first\n\n    const index = nextDeck.findIndex(card => card.id === id); // index will be -1 if it is not found\n\n    if (index > -1) {\n      nextDeck[index].count += 1;\n    } else {\n      nextDeck.push({\n        id,\n        name,\n        count: 1\n      });\n    }\n\n    setDeck(nextDeck);\n  };\n\n  const removeCardFromDeck = ({\n    id\n  }) => {\n    const nextDeck = [...deck];\n    const index = nextDeck.findIndex(card => card.id === id);\n\n    if (index === -1) {\n      // don't do anything if we're trying to remove a card not in the deck\n      return;\n    }\n\n    if (nextDeck[index].count === 1) {\n      // remove the card altogether\n      nextDeck.splice(index, 1);\n    } else {\n      // decrement the count\n      nextDeck[index].count -= 1;\n    }\n\n    setDeck(nextDeck);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n      setResults: setResults\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SearchResults, {\n      results: results,\n      addCardToDeck: addCardToDeck,\n      removeCardFromDeck: removeCardFromDeck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DeckList, {\n      deck: deck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"lfqvKca5TFDYn1bT4iEiIXohL7k=\");\n\n_c = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 73,\n  columnNumber: 5\n}, this), document.getElementById('root'));\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/anthony/course_work/deckbuilder/src/index.js"],"names":["React","useState","ReactDOM","axios","DeckList","SearchBar","SearchResults","fetchCards","App","results","setResults","deck","setDeck","console","log","addCardToDeck","id","name","nextDeck","index","findIndex","card","count","push","removeCardFromDeck","splice","render","document","getElementById"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,aAAP;AAEA,SACIC,QADJ,EAEIC,SAFJ,EAGIC,aAHJ,QAIO,cAJP;AAMA,SACIC,UADJ,QAEO,OAFP;;;AAIA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACd;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BL,OAA3B;;AAEA,QAAMM,aAAa,GAAG,CAAC;AAAEC,IAAAA,EAAF;AAAMC,IAAAA;AAAN,GAAD,KAAkB;AACpC,UAAMC,QAAQ,GAAG,CAAC,GAAGP,IAAJ,CAAjB,CADoC,CACR;;AAC5B,UAAMQ,KAAK,GAAGD,QAAQ,CAACE,SAAT,CAAmBC,IAAI,IAAIA,IAAI,CAACL,EAAL,KAAYA,EAAvC,CAAd,CAFoC,CAIpC;;AACA,QAAIG,KAAK,GAAG,CAAC,CAAb,EAAgB;AACZD,MAAAA,QAAQ,CAACC,KAAD,CAAR,CAAgBG,KAAhB,IAAyB,CAAzB;AACH,KAFD,MAEO;AACHJ,MAAAA,QAAQ,CAACK,IAAT,CAAc;AACVP,QAAAA,EADU;AAEVC,QAAAA,IAFU;AAGVK,QAAAA,KAAK,EAAE;AAHG,OAAd;AAKH;;AAEDV,IAAAA,OAAO,CAACM,QAAD,CAAP;AACH,GAhBD;;AAkBA,QAAMM,kBAAkB,GAAG,CAAC;AAAER,IAAAA;AAAF,GAAD,KAAY;AACnC,UAAME,QAAQ,GAAG,CAAC,GAAGP,IAAJ,CAAjB;AACA,UAAMQ,KAAK,GAAGD,QAAQ,CAACE,SAAT,CAAmBC,IAAI,IAAIA,IAAI,CAACL,EAAL,KAAYA,EAAvC,CAAd;;AAEA,QAAIG,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd;AACA;AACH;;AAED,QAAID,QAAQ,CAACC,KAAD,CAAR,CAAgBG,KAAhB,KAA0B,CAA9B,EAAiC;AAC7B;AACAJ,MAAAA,QAAQ,CAACO,MAAT,CAAgBN,KAAhB,EAAuB,CAAvB;AACH,KAHD,MAGO;AACH;AACAD,MAAAA,QAAQ,CAACC,KAAD,CAAR,CAAgBG,KAAhB,IAAyB,CAAzB;AACH;;AAEDV,IAAAA,OAAO,CAACM,QAAD,CAAP;AACH,GAlBD;;AAoBA,sBACI;AAAK,IAAA,EAAE,EAAC,KAAR;AAAA,4BACI,QAAC,SAAD;AAAW,MAAA,UAAU,EAAER;AAAvB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,aAAD;AACI,MAAA,OAAO,EAAED,OADb;AAEI,MAAA,aAAa,EAAEM,aAFnB;AAGI,MAAA,kBAAkB,EAAES;AAHxB;AAAA;AAAA;AAAA;AAAA,YAFJ,eAMI,QAAC,QAAD;AAAU,MAAA,IAAI,EAAEb;AAAhB;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAtDD;;GAAMH,G;;KAAAA,G;AAwDNN,QAAQ,CAACwB,MAAT,eACI,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,QADJ,EAEIC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFJ","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport './index.css';\n\nimport {\n    DeckList,\n    SearchBar,\n    SearchResults\n} from './components';\n\nimport {\n    fetchCards,\n} from './api';\n\nconst App = () => {\n    // fetchCards().then(console.log);\n    const [results, setResults] = useState([]);\n    const [deck, setDeck] = useState([]);\n    console.log(\"new results\", results)\n\n    const addCardToDeck = ({ id, name }) => {\n        const nextDeck = [...deck]; // make a duplicate first\n        const index = nextDeck.findIndex(card => card.id === id);\n\n        // index will be -1 if it is not found\n        if (index > -1) {\n            nextDeck[index].count += 1;\n        } else {\n            nextDeck.push({\n                id,\n                name,\n                count: 1\n            });\n        }\n\n        setDeck(nextDeck);\n    }\n\n    const removeCardFromDeck = ({ id }) => {\n        const nextDeck = [...deck];\n        const index = nextDeck.findIndex(card => card.id === id);\n\n        if (index === -1) {\n            // don't do anything if we're trying to remove a card not in the deck\n            return;\n        }\n\n        if (nextDeck[index].count === 1) {\n            // remove the card altogether\n            nextDeck.splice(index, 1);\n        } else {\n            // decrement the count\n            nextDeck[index].count -= 1;\n        }\n\n        setDeck(nextDeck);\n    }\n\n    return (\n        <div id=\"app\">\n            <SearchBar setResults={setResults} />\n            <SearchResults\n                results={results}\n                addCardToDeck={addCardToDeck}\n                removeCardFromDeck={removeCardFromDeck} />\n            <DeckList deck={deck} />\n        </div>\n    );\n}\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);"]},"metadata":{},"sourceType":"module"}